unbind C-b
set -g prefix C-a

# more intuitive keybindings for splitting
# unbind %
# bind h split-window -h
# unbind '"'
# bind v split-window -v

# set vi keys
unbind [
bind Escape copy-mode
setw -g mode-keys vi
unbind p
bind p paste-buffer
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection

# send the prefix to client inside window (ala nested sessions)
bind-key a send-prefix

# toggle last window like screen
bind-key b last-window

# toggle statusbar
# bind-key c-b set-option status
#
# confirm before killing a window or the server
bind-key z confirm kill-session
bind-key Z confirm kill-server

# ctrl+left/right cycles thru windows
bind-key -n C-right next
bind-key -n C-left prev

bind-key c-n next
bind-key c-p prev

bind-key C-c new-window
bind \ split-window -h
bind - split-window -v

bind ^u swapp -U	# 交换上下窗格

# resize panes like vim
bind-key < resize-pane -L 15
bind-key -r > resize-pane -R 15
bind-key -r + resize-pane -U 15
bind-key -r = resize-pane -D 15

bind-key H resize-pane -L 5
bind-key L resize-pane -R 5
bind-key K resize-pane -U 5
bind-key J resize-pane -D 5

bind k selectp -U # 选择上窗格
bind j selectp -D # 选择下窗格
bind h selectp -L # 选择左窗格
bind l selectp -R # 选择右窗格

bind-key C-H select-layout even-horizontal
bind-key C-V select-layout even-vertical

# quick view of processes
bind 'm' splitw -h -c build -p 40 "make; if [[ $? != 0 ]]; then sleep 5; else sleep 3; fi"
bind / command-prompt -p command "splitw -h 'exec sh -c \"%%|more; read\"' "
bind ? command-prompt -p man "splitw -h 'exec man %%'"
bind @ command-prompt -p pydoc "splitw -h 'exec pydoc %%'"
# bind P splitw -p 10 "echo ping 8.8.8.8; ping 8.8.8.8; if [[ $? != 0 ]]; then sleep 3; fi"
bind P splitw -p 10 "~/yunio/script/ping.sh; sleep 5;"

# reload config (prefix r)
bind r source ~/.tmux.conf \; display "Configuration reloaded!"

# scrollback buffer n lines
set -g history-limit 5000

# on-screen time for display-panes in ms
set -g display-panes-time 2000

# start window indexing at one instead of zero
set -g base-index 1

# enable wm window titles
set -g set-titles on

# wm window title string (uses statusbar variables)
set -g set-titles-string "#I #W"

#控制台激活后的持续时间；设置合适的时间以避免每次操作都要先激活控制台，单位为毫秒
set-option -g repeat-time 1000
set-option -g display-time 5000                   #提示信息的持续时间；设置足够的时间以避免看不清提示，单位为毫秒

setw -g utf8 on
set -g status-utf8 on
set-option -g status-utf8 on
set-window-option -g utf8 on

set-option -g visual-activity on
setw -g monitor-activity on

#### statusbar ####
set -g status-interval 1
set -g status-justify centre # center align window list
set -g status-right-length 30
set -g status-right "#[fg=green]#(uptime.pl)#[default] #[fg=blue] [#[fg=green]%H:%M#[fg=blue]] #[fg=default]• #[fg=green]#(cut -d ' ' -f 1-3 /proc/loadavg)#[default]"

# setw -g aggressive-resize on

set -g default-terminal "screen-256color"

# command/message line colors
set -g message-fg white
set -g message-bg black
set -g message-attr bright
set -g mouse-select-pane on

# default window title colors
set-window-option -g window-status-fg white
set-window-option -g window-status-bg default
set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright

# default statusbar colors
set -g status-bg default
set -g status-fg white
set -g status-attr bright

# create proxy and jekyll
new -s 'servers'
new-window -n 'jekyll' -c 'blog/' 'jekyll server --watch'
kill-window -t 1
new-window -n 'proxy' -c '/opt/software/goagent-linux' 'python2 proxy.py'
new-window
select-window -t 3
